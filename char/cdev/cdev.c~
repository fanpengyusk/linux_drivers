#include <linux/module.h>
#include <linux/fs.h>
#include <linux/errno.h>
#include <linux/init.h>
#include <linux/cdev.h>
#include <asm/uaccess.h>
#include <linux/device.h>
static int x4412_cdev_major;
static struct cdev x4412_cdev;
static struct class *cdev_class;
int x4412_cdev_open(struct inode *inode, struct file *filp)
{
	return 0;
}

int x4412_cdev_release(struct inode *inode, struct file *filp)
{
	return 0;
}

static long x4412_cdev_ioctl(struct file *file,unsigned int cmd, unsigned long arg)
{
	return 0;
}

static ssize_t x4412_cdev_read(struct file *filp, char __user *buf,size_t size,loff_t *ppos)
{
	int read_sizes = 0;
	char *p;
	char Message[]="This is x4412/ibox devboard.";
	p = Message;
	while(size && *p)
	{
		if(put_user(*(p++),buf++))
		return -EINVAL;
		size--;
		read_sizes++;
	}
	return read_sizes;
}

static ssize_t x4412_cdev_write(struct file *filp, const char __user *buf,size_t size, loff_t *ppos)
{
	int i;
	char str;
	for(i=0;i<size;i++)
	{
		if(!get_user(str,buf++))
		printk("%c",str);
	}
	printk("\r\n");
	return size;
}

static const struct file_operations x4412_fops =
{
	.owner = THIS_MODULE,
	.read = x4412_cdev_read,
	.write = x4412_cdev_write,
	.unlocked_ioctl = x4412_cdev_ioctl,
	.open = x4412_cdev_open,
	.release = x4412_cdev_release,
};

static void x4412_setup_cdev(void)
{
	int err, devno = MKDEV(x4412_cdev_major, 0);
	cdev_init(&x4412_cdev, &x4412_fops);
	err = cdev_add(&x4412_cdev, devno, 1);
	if (err)
	printk(KERN_NOTICE "Error %d adding x4412_cdev", err);
}

static void x4412_clear_cdev(void)
{
	cdev_del(&x4412_cdev);
	unregister_chrdev_region(MKDEV(x4412_cdev_major, 0), 1);
}

int x4412_cdev_init(void)
{
	int result;
	dev_t devno;
	result = alloc_chrdev_region(&devno, 0, 1, "x4412-cdev");
	x4412_cdev_major = MAJOR(devno);
	if(result < 0)
	{
		printk("register x4412-cdev error!\r\n");
		return result;
	}
	printk("x4412-cdev main dev number:%d\r\n",x4412_cdev_major);
	x4412_setup_cdev();
	cdev_class = class_create(THIS_MODULE,"x4412-cdev");
	if(IS_ERR(cdev_class))
	{
		x4412_clear_cdev();
		return PTR_ERR(cdev_class);
	}
	device_create(cdev_class,NULL,MKDEV(x4412_cdev_major,0),NULL,"x4412-cdev");
	return 0;
}

void x4412_cdev_exit(void)
{
	device_destroy(cdev_class,MKDEV(x4412_cdev_major,0));
	class_destroy(cdev_class);
	x4412_clear_cdev();
}

MODULE_AUTHOR("www.9tripod.com");
MODULE_LICENSE("GPL");
module_init(x4412_cdev_init);
module_exit(x4412_cdev_exit);
